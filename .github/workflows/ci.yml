name: Django CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      DEBUG: 1
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: localhost
      DB_PORT: 5432
      DJANGO_SETTINGS_MODULE: bolid_backend.settings
      PYTHONUNBUFFERED: 1
      STATIC_ROOT: /tmp/staticfiles

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run flake8
        run: flake8 .

      - name: Wait for Postgres
        run: |
          until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME; do
            sleep 1
          done

      - name: Check migrations
        run: python manage.py makemigrations --check --dry-run

      - name: Apply migrations
        run: python manage.py migrate --noinput

      - name: Run tests
        run: python manage.py test

      - name: Check static files
        run: python manage.py collectstatic --dry-run --noinput

      - name: Build Docker image
        run: docker build -t bolid-backend-ci .

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Trigger Render Deploy
        run: |
          curl -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -d '' \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys

      - name: Wait for service to be live
        run: |
          URL="https://bolid-test-task.onrender.com/"
          MAX_RETRIES=47
          COUNT=0
          until $(curl --output /dev/null --silent --head --fail "$URL"); do
            COUNT=$((COUNT+1))
            if [ $COUNT -ge $MAX_RETRIES ]; then
              echo "Service did not become available in time"
              exit 1
            fi
            echo "Waiting for service to be ready... ($COUNT/$MAX_RETRIES)"
            sleep 15
          done
          echo "Service is up and running!"

      - name: Smoke test API
        run: |
          URL_BASE="https://bolid-test-task.onrender.com/api/v1"

          RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/sensors.json "$URL_BASE/sensors/")
          if [ "$RESPONSE" != "200" ]; then
            echo "GET /sensors/ failed! HTTP code: $RESPONSE"
            cat /tmp/sensors.json
            exit 1
          fi

          echo '[{"sensor_id":0,"name":"TestEvent","temperature":25,"humidity":50}]' > /tmp/sample.json

          RESPONSE_CODE=$(curl -s -w "%{http_code}" -o /tmp/upload.json -X POST \
            -F "file=@/tmp/sample.json;type=application/json" \
            "$URL_BASE/events/upload-json/")
          if [ "$RESPONSE_CODE" != "201" ]; then
            echo "POST /events/upload-json failed! HTTP code: $RESPONSE_CODE"
            cat /tmp/upload.json
            exit 1
          fi

          echo "Smoke test passed: API endpoints are working correctly."